project.setDescription('Parts of GeoGebra related to desktop platforms')

apply plugin: 'application'
apply plugin: 'jacoco'

repositories {
    maven {
        url 'http://dev.geogebra.org/maven2'
    }
}

File javaHome = new File(System.properties['java.home'])
javaHome = javaHome.name == 'jre' ? javaHome.parentFile : javaHome
String jfxrtLocation = new File("${javaHome}/jre/lib/jfxrt.jar").absolutePath
// JavaFX locations for JDK7, JDK7, JDK8
for (location in ['lib/jfxrt.jar', 'jre/lib/jfxrt.jar', 'jre/lib/ext/jfxrt.jar']) {
    File file = new File(javaHome, location)
    if (file.exists()) {
        jfxrtLocation = file.absolutePath
        break
    }
}

sourceCompatibility = 1.6
targetCompatibility = 1.6

List jlatexmath = [
	'org.scilab.forge:jlatexmath-minimal:1.0.3b',
	'org.scilab.forge:jlm_cyrillic:1.0.3',
	'org.scilab.forge:jlm_greek:1.0.3']

List ext = [
	'netscape.javascript:jsobject:1', 
	'com.apple:mac_extensions:20040714', 
	'com.ogprover:OpenGeoProver:20120725',
	'com.sun:jna:4.1.0']


dependencies {
	compile project(':common'), project(':jogl2'), project(':input3D:impl'), project(':giac-jni'), jlatexmath, ext, files(jfxrtLocation)

	runtime "org.jogamp.jogl:jogl-all:$joglVersion:natives-linux-amd64",
        "org.jogamp.jogl:jogl-all:$joglVersion:natives-windows-i586",
        "org.jogamp.jogl:jogl-all:$joglVersion:natives-windows-amd64",
        "org.jogamp.jogl:jogl-all:$joglVersion:natives-macosx-universal",
        "org.jogamp.jogl:jogl-all:$joglVersion:natives-linux-i586"
    runtime "org.jogamp.gluegen:gluegen-rt:$joglVersion:natives-linux-amd64",
        "org.jogamp.gluegen:gluegen-rt:$joglVersion:natives-windows-i586",
        "org.jogamp.gluegen:gluegen-rt:$joglVersion:natives-windows-amd64",
        "org.jogamp.gluegen:gluegen-rt:$joglVersion:natives-macosx-universal",
        "org.jogamp.gluegen:gluegen-rt:$joglVersion:natives-linux-i586"
    runtime "fr.ujf-grenoble:javagiac:$javaGiacVersion:natives-linux-amd64",
	    "fr.ujf-grenoble:javagiac:$javaGiacVersion:natives-linux-i586",
	    "fr.ujf-grenoble:javagiac:$javaGiacVersion:natives-windows-amd64", // 201503271100 should have been used (for some strange reason versions cannot be mixed)
	    "fr.ujf-grenoble:javagiac:$javaGiacVersion:natives-windows-i586",
	    "fr.ujf-grenoble:javagiac:$javaGiacVersion:natives-macosx-universal"
	
	testCompile 'junit:junit:4.+'
}

mainClassName = "org.geogebra.desktop.GeoGebra3D"

run {
    // Copying JOGL related native JARs into the same directory where the non-native JAR takes place.
    // JOGL is simply dumb, it cannot work neither with java.library.path nor classpath or anything. Arrgh. 
	def gluegen = project.configurations.compile.find { it.name == "gluegen-rt-${joglVersion}.jar" }
	def gluegen_natives = project.configurations.runtime.findAll { it.name.startsWith("gluegen-rt-$joglVersion-natives") }
	def gluegen_dir = gluegen.getParent()
	for (i in gluegen_natives) {
		def gluegen_native_path = i.getPath()
		ant.copy(file:"$gluegen_native_path", todir:"$gluegen_dir")
	}
	def jogl = project.configurations.compile.find { it.name == "jogl-all-${joglVersion}.jar" }
	def jogl_natives = project.configurations.runtime.findAll { it.name.startsWith("jogl-all-$joglVersion-natives") }
	def jogl_dir = jogl.getParent()
	for (i in jogl_natives) {
		def jogl_native_path = i.getPath()
		ant.copy(file:"$jogl_native_path", todir:"$jogl_dir")
	}

}

// http://stackoverflow.com/questions/20638039/gradle-and-jacoco-instrument-classes-from-a-separate-subproject
gradle.projectsEvaluated {
    // include src from all dependent projects (compile dependency) in JaCoCo test report
    jacocoTestReport {
        // get all projects we have a (compile) dependency on
        def projs = configurations.compile.getAllDependencies().withType(ProjectDependency).collect{it.getDependencyProject()}
        projs.each {
            additionalSourceDirs files(it.sourceSets.main.java.srcDirs)
            additionalClassDirs files(it.sourceSets.main.output.classesDir)
        }
    }
}	
